import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:flutter_firebase_chat_core/flutter_firebase_chat_core.dart';
import 'package:flutter_chat_types/flutter_chat_types.dart' as types;
import 'package:uuid/uuid.dart';

import 'chatpage2.dart'; // —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —á–∞—Ç–∞
import 'chatforstudents.dart'; // —Å–ø–∏—Å–æ–∫ —é–∑–µ—Ä–æ–≤

class ChatsPage extends StatefulWidget {
  const ChatsPage({super.key});

  @override
  State<ChatsPage> createState() => _ChatsPageState();
}

class _ChatsPageState extends State<ChatsPage> {
  @override
  void initState() {
    super.initState();
    _ensureUserLoggedIn();
  }

  Future<void> _ensureUserLoggedIn() async {
    final currentUser = FirebaseAuth.instance.currentUser;
    if (currentUser == null) {
      try {
        await FirebaseAuth.instance.signInAnonymously();
        debugPrint(
          '‚úÖ –ê–Ω–æ–Ω–∏–º–Ω—ã–π –≤—Ö–æ–¥: ${FirebaseAuth.instance.currentUser?.uid}',
        );
      } catch (e) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –≤—Ö–æ–¥–∞: $e');
      }
    }
  }

  Future<void> createTestChat(BuildContext context) async {
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      var currentUser = FirebaseAuth.instance.currentUser;
      if (currentUser == null) {
        await FirebaseAuth.instance.signInAnonymously();
        currentUser = FirebaseAuth.instance.currentUser;
      }

      if (currentUser == null) throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏');

      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ userId
      final testUserId = const Uuid().v4();

      // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      final testUser = types.User(
        id: testUserId,
        firstName: 'Test',
        lastName: 'User',
        imageUrl: 'https://i.pravatar.cc/150?img=3',
        role: types.Role.user,
        metadata: {'createdAt': DateTime.now().toIso8601String()},
      );
      await FirebaseChatCore.instance.createUserInFirestore(testUser);
      debugPrint('üë§ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ${testUser.id}');

      // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
      final room = await FirebaseChatCore.instance.createRoom(testUser);
      debugPrint('üì¶ –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞: ${room.id}');

      // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
      final message = types.TextMessage(
        author: types.User(id: currentUser.uid),
        createdAt: DateTime.now().millisecondsSinceEpoch,
        id: DateTime.now().millisecondsSinceEpoch.toString(),
        text: 'Hello, this is a test message!',
        roomId: room.id,
      );
      FirebaseChatCore.instance.sendMessage(message, room.id);
      debugPrint('üì© –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    } catch (e, stack) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —á–∞—Ç–∞: $e');
      debugPrint(stack.toString());
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(SnackBar(content: Text('–û—à–∏–±–∫–∞: $e')));
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('–ß–∞—Ç—ã'),
        actions: [
          IconButton(
            icon: const Icon(Icons.person_add),
            onPressed: () {
              Navigator.push(
                context,
                MaterialPageRoute(builder: (_) => const UsersPage()),
              );
            },
            tooltip: '–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
          ),
          IconButton(
            icon: const Icon(Icons.add),
            onPressed: () => createTestChat(context),
            tooltip: '–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç',
          ),
        ],
      ),
      body: StreamBuilder<List<types.Room>>(
        stream: FirebaseChatCore.instance.rooms(),
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Center(child: CircularProgressIndicator());
          }

          if (snapshot.hasError) {
            return Center(child: Text('–û—à–∏–±–∫—ã—ã–∞: ${snapshot.error}'));
          }

          final rooms = snapshot.data ?? [];

          if (rooms.isEmpty) {
            return Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  const Icon(
                    Icons.chat_bubble_outline,
                    size: 64,
                    color: Colors.grey,
                  ),
                  const SizedBox(height: 16),
                  const Text('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤'),
                  const SizedBox(height: 12),
                  ElevatedButton(
                    onPressed: () => createTestChat(context),
                    child: const Text('–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç'),
                  ),
                  ElevatedButton(
                    onPressed: () {
                      Navigator.push(
                        context,
                        MaterialPageRoute(builder: (_) => const UsersPage()),
                      );
                    },
                    child: const Text('–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'),
                  ),
                ],
              ),
            );
          }

          return ListView.builder(
            itemCount: rooms.length,
            itemBuilder: (context, index) {
              final room = rooms[index];

              return ListTile(
                leading: CircleAvatar(
                  backgroundImage:
                      (room.imageUrl != null && room.imageUrl!.isNotEmpty)
                          ? NetworkImage(room.imageUrl!)
                          : null,
                  child:
                      (room.imageUrl == null || room.imageUrl!.isEmpty)
                          ? const Icon(Icons.person)
                          : null,
                ),
                title: Text(room.name ?? '–ë–µ–∑ –∏–º–µ–Ω–∏'),
                subtitle: Text(room.id),

                onTap: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(builder: (_) => ChatPage(room: room)),
                  );
                },
              );
            },
          );
        },
      ),
    );
  }
}
